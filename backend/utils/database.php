
<?php
// Database utilities for the Blood Donation System

function testDatabaseConnection($config) {
    $host = $config['host'];
    $dbname = $config['database'];
    $user = $config['user'];
    $password = $config['password'];
    $type = $config['type'] ?? 'pgsql';
    
    try {
        // Create a PDO instance based on database type
        if ($type === 'mysql' || $type === 'mariadb') {
            $dsn = "mysql:host=$host;dbname=$dbname;";
        } else {
            $dsn = "pgsql:host=$host;dbname=$dbname;";
        }
        
        $pdo = new PDO($dsn, $user, $password);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        
        return ['success' => true, 'message' => 'Connection successful'];
    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Connection failed: ' . $e->getMessage()];
    }
}

function createAdminUser($pdo, $admin) {
    $username = $admin['username'];
    $email = $admin['email'];
    $password = password_hash($admin['password'], PASSWORD_DEFAULT);
    
    try {
        $stmt = $pdo->prepare("INSERT INTO users (email, password_hash, name, role) 
                              VALUES (:email, :password, :name, 'admin')");
        $stmt->bindParam(':email', $email);
        $stmt->bindParam(':password', $password);
        $stmt->bindParam(':name', $username);
        $stmt->execute();
        
        return ['success' => true, 'message' => 'Admin user created successfully'];
    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Admin user creation failed: ' . $e->getMessage()];
    }
}

function createAppSettings($pdo, $settings) {
    try {
        foreach ($settings as $setting) {
            $key = $setting['settingKey'];
            $value = $setting['settingValue'];
            $description = $setting['description'] ?? '';
            
            // Check if setting already exists
            $stmt = $pdo->prepare("SELECT id FROM app_settings WHERE setting_key = :key");
            $stmt->bindParam(':key', $key);
            $stmt->execute();
            
            if ($stmt->fetch()) {
                // Update existing setting
                $stmt = $pdo->prepare("UPDATE app_settings SET setting_value = :value, description = :description 
                                      WHERE setting_key = :key");
            } else {
                // Insert new setting
                $stmt = $pdo->prepare("INSERT INTO app_settings (setting_key, setting_value, description) 
                                      VALUES (:key, :value, :description)");
            }
            
            $stmt->bindParam(':key', $key);
            $stmt->bindParam(':value', $value);
            $stmt->bindParam(':description', $description);
            $stmt->execute();
        }
        
        return ['success' => true, 'message' => 'App settings created successfully'];
    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'App settings creation failed: ' . $e->getMessage()];
    }
}

function runDatabaseMigrations($pdo, $sqlFilePath) {
    try {
        // Read and execute SQL from the SQL file
        if (!file_exists($sqlFilePath)) {
            return ['success' => false, 'message' => 'Database setup file not found'];
        }
        
        $sqlFile = file_get_contents($sqlFilePath);
        $pdo->exec($sqlFile);
        
        return ['success' => true, 'message' => 'Database migrations completed successfully'];
    } catch (PDOException $e) {
        return ['success' => false, 'message' => 'Database migrations failed: ' . $e->getMessage()];
    }
}

function saveDbConfigFile($config, $outputPath) {
    try {
        $configFile = "<?php\n";
        $configFile .= "// Generated by installer\n";
        $configFile .= "\$DB_HOST = '{$config['host']}';\n";
        $configFile .= "\$DB_NAME = '{$config['database']}';\n";
        $configFile .= "\$DB_USER = '{$config['user']}';\n";
        $configFile .= "\$DB_PASSWORD = '{$config['password']}';\n";
        $configFile .= "\$DB_TYPE = '{$config['type']}';\n";
        
        file_put_contents($outputPath, $configFile);
        
        return ['success' => true, 'message' => 'Configuration file created successfully'];
    } catch (Exception $e) {
        return ['success' => false, 'message' => 'Could not save configuration file: ' . $e->getMessage()];
    }
}
